`include "somador.v"
`include "ALU.v"
`include "ALUc.v"
`include "Mux.v"
`include "Controle.v"
`include "Data_Mem.v"
`include "PC.v"
`include "Registradores.v"
`include "Imm.v"
`include "branch.v"
`include "Instr_Mem.v"

module riscv(
	input wire clk;
	input wire reset;
	output wire [31:0] PC_I;
	output wire [31:0] Instr_I;
);
// Fios do caminho de dados
wire [31:0] PC_S;
wire [31:0] PC4;
wire [31:0] PC_branch;
wire [31:0] PC_Mux;
wire [31:0] Instr;
wire [31:0] Imm;
wire [31:0] ReadData1;
wire [31:0] ReadData2;
wire [31:0] ALUmux;
wire [31:0] ALUr;
wire [31:0] MemRead;
wire [31:0] WriteB;

// Fios de Controle
wire Branch_beq; // Do Control para o módulo Branch
wire MemReadctrl;
wire MemRegctrl;
wire MemWritectrl;
wire ALUctrl;
wire RegWritectrl;
wire [1:0] ALUopctrl; // Do Control para ALUc
wire [3:0] ALUselOp; // Da ALUc para ALU
wire ALUzero;
wire Branch_flag; // Do módulo Branch para o MUX do PC

// Decodificação de campos da instrução
wire [6:0] opcode = Instr_I[6:0];
wire [4:0] rd = Instr_I[11:7];
wire [2:0] funct3 = Instr_I[14:12];
wire [4:0] rs1 = Instr_I[19:15];
wire [4:0] rs2 = Instr_I[24:20];
wire [6:0] funct7 = Instr_I[31:25];

// Saídas de depuração
assign PC_I = PC_S;
assign Instr_I = Instr;

PC Program_Counter (
    .PC_E(pc_next_mux_out),
    .clk(clk),
    .reset(reset),
    .PC_S(PC_S)
);

Somador soma4 (
    .a(PC_S),
    .b(32'd4),
    .out(PC4)
);

Instr_Mem Instrucao_Memoria (
    .Ender_Instr(PC_S),
    .Instrucao(Instr)
);

Controle Main_Control (
    .Opcode(opcode),
    .Branch(Branch_beq),
    .MemRead(MemReadctrl),
    .MemtoReg(MemRegctrl),
    .MemWrite(MemWritectrl),
    .ALUSrc(ALUctrl),
    .RegWrite(RegWritectrl),
    .ALUOp(ALUopctrl)
);

Registradores Reg_File(
    .clk(clk), 
	.reset(reset), 
	.RegWrite(RegWritectrl),
    .WriteData(WriteB), 
	.rs1(rs1), 
	.rs2(rs2), 
	.WriteRegister(rd),
    .ReadData1(ReadData1), 
	.ReadData2(ReadData2)
);

Imm Immediate_Generator (
    .Instr(Instr),
    .imm_data(Imm)
);

ALUc Alu_Control_Unit (
    .ALUop(ALUopctrl),
    .Funct({funct7[5], funct3}), 
    .Op(ALUselOp)
);

Mux Alu_mux_operand2 (
    .num1(ReadData2),
    .num2(Imm),
    .sel(ALUctrl),
    .data_S(ALUmux)
);

ALU Main_ALU (
    .num1(ReadData1),
    .num2(ALUmux),
    .ALUop(ALUselOp),
    .S(ALUr),
    .zero(ALUzero)
);

Somador pc_adder_branch (
    .a(PC_S),
    .b(Imm), 
    .out(PC_branch)
);

branch branch_logic (
    .Branch(Branch_beq), 
    .zero(ALUzero),       
    .branch_S(Branch_flag)	
);

Data_Mem Data_Mem (
    .clk(clk),
    .reset(reset),
    .MemSum(ALUr),    
    .WriteData(ReadData2), 
    .MemWrite(MemWritectrl),
    .MemRead(MemReadctrl),
    .ReadData(MemRead),
    .Funct3(funct3)
);

Mux writeback_mux (
    .num1(ALUr),
    .num2(MemRead),
    .sel(MemRegctrl),
    .data_S(WriteB)
	 num1, num2, sel, data_S
);

Mux pc_next_mux (
    .num1(PC4),
    .num2(PC_branch),
    .sel(Branch_flag),
    .data_S(PC_Mux)
	 num1, num2, sel, data_S
);

endmodule 